/*
 * Copyright (c) 2021, MegaEase
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// code generated by github.com/megaease/easemeshctl/cmd/generator, DO NOT EDIT.
package meshclient

import (
	"context"
	"encoding/json"
	"fmt"
	v2alpha1 "github.com/megaease/easemesh-api/v2alpha1"
	resource "github.com/megaease/easemeshctl/cmd/client/resource"
	client "github.com/megaease/easemeshctl/cmd/common/client"
	errors "github.com/pkg/errors"
	"net/http"
)

type trafficTargetGetter struct {
	client *meshClient
}
type trafficTargetInterface struct {
	client *meshClient
}

func (t *trafficTargetGetter) TrafficTarget() TrafficTargetInterface {
	return &trafficTargetInterface{client: t.client}
}
func (t *trafficTargetInterface) Get(args0 context.Context, args1 string) (*resource.TrafficTarget, error) {
	url := fmt.Sprintf("http://"+t.client.server+apiURL+"/mesh/"+"traffictargets/%s", args1)
	r0, err := client.NewHTTPJSON().GetByContext(args0, url, nil, nil).HandleResponse(func(buff []byte, statusCode int) (interface{}, error) {
		if statusCode == http.StatusNotFound {
			return nil, errors.Wrapf(NotFoundError, "get TrafficTarget %s", args1)
		}
		if statusCode >= 300 {
			return nil, errors.Errorf("call %s failed, return status code %d text %+v", url, statusCode, string(buff))
		}
		TrafficTarget := &v2alpha1.TrafficTarget{}
		err := json.Unmarshal(buff, TrafficTarget)
		if err != nil {
			return nil, errors.Wrapf(err, "unmarshal data to v2alpha1.TrafficTarget")
		}
		return resource.ToTrafficTarget(TrafficTarget), nil
	})
	if err != nil {
		return nil, err
	}
	return r0.(*resource.TrafficTarget), nil
}
func (t *trafficTargetInterface) Patch(args0 context.Context, args1 *resource.TrafficTarget) error {
	url := fmt.Sprintf("http://"+t.client.server+apiURL+"/mesh/"+"traffictargets/%s", args1.Name())
	object := args1.ToV2Alpha1()
	_, err := client.NewHTTPJSON().PutByContext(args0, url, object, nil).HandleResponse(func(b []byte, statusCode int) (interface{}, error) {
		if statusCode == http.StatusNotFound {
			return nil, errors.Wrapf(NotFoundError, "patch TrafficTarget %s", args1.Name())
		}
		if statusCode < 300 && statusCode >= 200 {
			return nil, nil
		}
		return nil, errors.Errorf("call PUT %s failed, return statuscode %d text %+v", url, statusCode, string(b))
	})
	return err
}
func (t *trafficTargetInterface) Create(args0 context.Context, args1 *resource.TrafficTarget) error {
	url := "http://" + t.client.server + apiURL + "/mesh/traffictargets"
	object := args1.ToV2Alpha1()
	_, err := client.NewHTTPJSON().PostByContext(args0, url, object, nil).HandleResponse(func(b []byte, statusCode int) (interface{}, error) {
		if statusCode == http.StatusConflict {
			return nil, errors.Wrapf(ConflictError, "create TrafficTarget %s", args1.Name())
		}
		if statusCode < 300 && statusCode >= 200 {
			return nil, nil
		}
		return nil, errors.Errorf("call Post %s failed, return statuscode %d text %+v", url, statusCode, string(b))
	})
	return err
}
func (t *trafficTargetInterface) Delete(args0 context.Context, args1 string) error {
	url := fmt.Sprintf("http://"+t.client.server+apiURL+"/mesh/"+"traffictargets/%s", args1)
	_, err := client.NewHTTPJSON().DeleteByContext(args0, url, nil, nil).HandleResponse(func(b []byte, statusCode int) (interface{}, error) {
		if statusCode == http.StatusNotFound {
			return nil, errors.Wrapf(NotFoundError, "Delete TrafficTarget %s", args1)
		}
		if statusCode < 300 && statusCode >= 200 {
			return nil, nil
		}
		return nil, errors.Errorf("call Delete %s failed, return statuscode %d text %+v", url, statusCode, string(b))
	})
	return err
}
func (t *trafficTargetInterface) List(args0 context.Context) ([]*resource.TrafficTarget, error) {
	url := "http://" + t.client.server + apiURL + "/mesh/traffictargets"
	result, err := client.NewHTTPJSON().GetByContext(args0, url, nil, nil).HandleResponse(func(b []byte, statusCode int) (interface{}, error) {
		if statusCode == http.StatusNotFound {
			return nil, errors.Wrapf(NotFoundError, "list service")
		}
		if statusCode >= 300 && statusCode < 200 {
			return nil, errors.Errorf("call GET %s failed, return statuscode %d text %+v", url, statusCode, b)
		}
		trafficTarget := []v2alpha1.TrafficTarget{}
		err := json.Unmarshal(b, &trafficTarget)
		if err != nil {
			return nil, errors.Wrapf(err, "unmarshal data to v2alpha1.")
		}
		results := []*resource.TrafficTarget{}
		for _, item := range trafficTarget {
			copy := item
			results = append(results, resource.ToTrafficTarget(&copy))
		}
		return results, nil
	})
	if err != nil {
		return nil, err
	}
	return result.([]*resource.TrafficTarget), nil
}
