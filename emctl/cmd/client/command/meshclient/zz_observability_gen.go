// Code generated by github.com/megaease/easemeshctl/cmd/generator, DO NOT EDIT.
package meshclient

import (
	"context"
	"encoding/json"
	"fmt"
	v1alpha1 "github.com/megaease/easemesh-api/v1alpha1"
	resource "github.com/megaease/easemeshctl/cmd/client/resource"
	client "github.com/megaease/easemeshctl/cmd/common/client"
	errors "github.com/pkg/errors"
	"net/http"
)

type observabilityGetter struct {
	client *meshClient
}
type observabilityOutputServerInterface struct {
	client *meshClient
}
type observabilityMetricsInterface struct {
	client *meshClient
}
type observabilityTracingsInterface struct {
	client *meshClient
}

func (o *observabilityGetter) ObservabilityTracings() ObservabilityTracingsInterface {
	return &observabilityTracingsInterface{client: o.client}
}
func (o *observabilityGetter) ObservabilityMetrics() ObservabilityMetricsInterface {
	return &observabilityMetricsInterface{client: o.client}
}
func (o *observabilityGetter) ObservabilityOutputServer() ObservabilityOutputServerInterface {
	return &observabilityOutputServerInterface{client: o.client}
}
func (o *observabilityOutputServerInterface) Get(args_0 context.Context, args_1 string) (*resource.ObservabilityOutputServer, error) {
	url := fmt.Sprintf("http://"+o.client.server+apiURL+"/mesh/services/%s/"+"outputserver", args_1)
	r, err := client.NewHTTPJSON().GetByContext(args_0, url, nil, nil).HandleResponse(func(b []byte, statusCode int) (interface{}, error) {
		if statusCode == http.StatusNotFound {
			return nil, errors.Wrapf(NotFoundError, "get ObservabilityOutputServer %s", args_1)
		}
		if statusCode >= 300 {
			return nil, errors.Errorf("call %s failed, return status code %d text %+v", url, statusCode, b)
		}
		ObservabilityOutputServer := &v1alpha1.ObservabilityOutputServer{}
		err := json.Unmarshal(b, ObservabilityOutputServer)
		if err != nil {
			return nil, errors.Wrapf(err, "unmarshal data to v1alpha1.ObservabilityOutputServer")
		}
		return resource.ToObservabilityOutputServer(args_1, ObservabilityOutputServer), nil
	})
	if err != nil {
		return nil, err
	}
	return r.(*resource.ObservabilityOutputServer), nil
}
func (o *observabilityOutputServerInterface) Patch(args_0 context.Context, args_1 *resource.ObservabilityOutputServer) error {
	url := fmt.Sprintf("http://"+o.client.server+apiURL+"/mesh/services/%s/"+"outputserver", args_1)
	object := args_1.ToV1Alpha1()
	_, err := client.NewHTTPJSON().PutByContext(args_0, url, object, nil).HandleResponse(func(b []byte, statusCode int) (interface{}, error) {
		if statusCode == http.StatusNotFound {
			return nil, errors.Wrapf(NotFoundError, "patch ObservabilityOutputServer %s", args_1.Name())
		}
		if statusCode < 300 && statusCode >= 200 {
			return nil, nil
		}
		return nil, errors.Errorf("call PUT %s failed, return statuscode %d text %+v", url, statusCode, b)
	})
	return err
}
func (o *observabilityOutputServerInterface) Create(args_0 context.Context, args_1 *resource.ObservabilityOutputServer) error {
	url := fmt.Sprintf("http://"+o.client.server+apiURL+"/mesh/services/%s/"+"outputserver", args_1)
	_, err := client.NewHTTPJSON().PostByContext(args_0, url, nil, nil).HandleResponse(func(b []byte, statusCode int) (interface{}, error) {
		if statusCode == http.StatusConflict {
			return nil, errors.Wrapf(ConflictError, "create ObservabilityOutputServer %s", args_1.Name())
		}
		if statusCode < 300 && statusCode >= 200 {
			return nil, nil
		}
		return nil, errors.Errorf("call Post %s failed, return statuscode %d text %+v", url, statusCode, b)
	})
	return err
}
func (o *observabilityOutputServerInterface) Delete(args_0 context.Context, args_1 string) error {
	url := fmt.Sprintf("http://"+o.client.server+apiURL+"/mesh/services/%s/"+"outputserver", args_1)
	_, err := client.NewHTTPJSON().DeleteByContext(args_0, url, nil, nil).HandleResponse(func(b []byte, statusCode int) (interface{}, error) {
		if statusCode == http.StatusNotFound {
			return nil, errors.Wrapf(NotFoundError, "Delete ObservabilityOutputServer %s", args_1)
		}
		if statusCode < 300 && statusCode >= 200 {
			return nil, nil
		}
		return nil, errors.Errorf("call Delete %s failed, return statuscode %d text %+v", url, statusCode, b)
	})
	return err
}
func (o *observabilityOutputServerInterface) List(args_0 context.Context) ([]*resource.ObservabilityOutputServer, error) {
	url := "http://" + o.client.server + apiURL + "/mesh/services"
	result, err := client.NewHTTPJSON().GetByContext(args_0, url, nil, nil).HandleResponse(func(b []byte, statusCode int) (interface{}, error) {
		if statusCode == http.StatusNotFound {
			return nil, errors.Wrapf(NotFoundError, "list service")
		}
		if statusCode >= 300 && statusCode < 200 {
			return nil, errors.Errorf("call GET %s failed, return statuscode %d text %+v", url, statusCode, b)
		}
		services := []v1alpha1.Service{}
		err := json.Unmarshal(b, &services)
		if err != nil {
			return nil, errors.Wrapf(err, "unmarshal data to v1alpha1.")
		}
	})
	if err != nil {
		return nil, err
	}
	return result.([]*resource.ObservabilityOutputServer), nil
}
func (o *observabilityMetricsInterface) Get(args_0 context.Context, args_1 string) (*resource.ObservabilityMetrics, error) {
	url := fmt.Sprintf("http://"+o.client.server+apiURL+"/mesh/services/%s/"+"metrics", args_1)
	r, err := client.NewHTTPJSON().GetByContext(args_0, url, nil, nil).HandleResponse(func(b []byte, statusCode int) (interface{}, error) {
		if statusCode == http.StatusNotFound {
			return nil, errors.Wrapf(NotFoundError, "get ObservabilityMetrics %s", args_1)
		}
		if statusCode >= 300 {
			return nil, errors.Errorf("call %s failed, return status code %d text %+v", url, statusCode, b)
		}
		ObservabilityMetrics := &v1alpha1.ObservabilityMetrics{}
		err := json.Unmarshal(b, ObservabilityMetrics)
		if err != nil {
			return nil, errors.Wrapf(err, "unmarshal data to v1alpha1.ObservabilityMetrics")
		}
		return resource.ToObservabilityMetrics(args_1, ObservabilityMetrics), nil
	})
	if err != nil {
		return nil, err
	}
	return r.(*resource.ObservabilityMetrics), nil
}
func (o *observabilityMetricsInterface) Patch(args_0 context.Context, args_1 *resource.ObservabilityMetrics) error {
	url := fmt.Sprintf("http://"+o.client.server+apiURL+"/mesh/services/%s/"+"metrics", args_1)
	object := args_1.ToV1Alpha1()
	_, err := client.NewHTTPJSON().PutByContext(args_0, url, object, nil).HandleResponse(func(b []byte, statusCode int) (interface{}, error) {
		if statusCode == http.StatusNotFound {
			return nil, errors.Wrapf(NotFoundError, "patch ObservabilityMetrics %s", args_1.Name())
		}
		if statusCode < 300 && statusCode >= 200 {
			return nil, nil
		}
		return nil, errors.Errorf("call PUT %s failed, return statuscode %d text %+v", url, statusCode, b)
	})
	return err
}
func (o *observabilityMetricsInterface) Create(args_0 context.Context, args_1 *resource.ObservabilityMetrics) error {
	url := fmt.Sprintf("http://"+o.client.server+apiURL+"/mesh/services/%s/"+"metrics", args_1)
	_, err := client.NewHTTPJSON().PostByContext(args_0, url, nil, nil).HandleResponse(func(b []byte, statusCode int) (interface{}, error) {
		if statusCode == http.StatusConflict {
			return nil, errors.Wrapf(ConflictError, "create ObservabilityMetrics %s", args_1.Name())
		}
		if statusCode < 300 && statusCode >= 200 {
			return nil, nil
		}
		return nil, errors.Errorf("call Post %s failed, return statuscode %d text %+v", url, statusCode, b)
	})
	return err
}
func (o *observabilityMetricsInterface) Delete(args_0 context.Context, args_1 string) error {
	url := fmt.Sprintf("http://"+o.client.server+apiURL+"/mesh/services/%s/"+"metrics", args_1)
	_, err := client.NewHTTPJSON().DeleteByContext(args_0, url, nil, nil).HandleResponse(func(b []byte, statusCode int) (interface{}, error) {
		if statusCode == http.StatusNotFound {
			return nil, errors.Wrapf(NotFoundError, "Delete ObservabilityMetrics %s", args_1)
		}
		if statusCode < 300 && statusCode >= 200 {
			return nil, nil
		}
		return nil, errors.Errorf("call Delete %s failed, return statuscode %d text %+v", url, statusCode, b)
	})
	return err
}
func (o *observabilityMetricsInterface) List(args_0 context.Context) ([]*resource.ObservabilityMetrics, error) {
	url := "http://" + o.client.server + apiURL + "/mesh/services"
	result, err := client.NewHTTPJSON().GetByContext(args_0, url, nil, nil).HandleResponse(func(b []byte, statusCode int) (interface{}, error) {
		if statusCode == http.StatusNotFound {
			return nil, errors.Wrapf(NotFoundError, "list service")
		}
		if statusCode >= 300 && statusCode < 200 {
			return nil, errors.Errorf("call GET %s failed, return statuscode %d text %+v", url, statusCode, b)
		}
		services := []v1alpha1.Service{}
		err := json.Unmarshal(b, &services)
		if err != nil {
			return nil, errors.Wrapf(err, "unmarshal data to v1alpha1.")
		}
	})
	if err != nil {
		return nil, err
	}
	return result.([]*resource.ObservabilityMetrics), nil
}
func (o *observabilityTracingsInterface) Get(args_0 context.Context, args_1 string) (*resource.ObservabilityTracings, error) {
	url := fmt.Sprintf("http://"+o.client.server+apiURL+"/mesh/services/%s/"+"tracings", args_1)
	r, err := client.NewHTTPJSON().GetByContext(args_0, url, nil, nil).HandleResponse(func(b []byte, statusCode int) (interface{}, error) {
		if statusCode == http.StatusNotFound {
			return nil, errors.Wrapf(NotFoundError, "get ObservabilityTracings %s", args_1)
		}
		if statusCode >= 300 {
			return nil, errors.Errorf("call %s failed, return status code %d text %+v", url, statusCode, b)
		}
		ObservabilityTracings := &v1alpha1.ObservabilityTracings{}
		err := json.Unmarshal(b, ObservabilityTracings)
		if err != nil {
			return nil, errors.Wrapf(err, "unmarshal data to v1alpha1.ObservabilityTracings")
		}
		return resource.ToObservabilityTracings(args_1, ObservabilityTracings), nil
	})
	if err != nil {
		return nil, err
	}
	return r.(*resource.ObservabilityTracings), nil
}
func (o *observabilityTracingsInterface) Patch(args_0 context.Context, args_1 *resource.ObservabilityTracings) error {
	url := fmt.Sprintf("http://"+o.client.server+apiURL+"/mesh/services/%s/"+"tracings", args_1)
	object := args_1.ToV1Alpha1()
	_, err := client.NewHTTPJSON().PutByContext(args_0, url, object, nil).HandleResponse(func(b []byte, statusCode int) (interface{}, error) {
		if statusCode == http.StatusNotFound {
			return nil, errors.Wrapf(NotFoundError, "patch ObservabilityTracings %s", args_1.Name())
		}
		if statusCode < 300 && statusCode >= 200 {
			return nil, nil
		}
		return nil, errors.Errorf("call PUT %s failed, return statuscode %d text %+v", url, statusCode, b)
	})
	return err
}
func (o *observabilityTracingsInterface) Create(args_0 context.Context, args_1 *resource.ObservabilityTracings) error {
	url := fmt.Sprintf("http://"+o.client.server+apiURL+"/mesh/services/%s/"+"tracings", args_1)
	_, err := client.NewHTTPJSON().PostByContext(args_0, url, nil, nil).HandleResponse(func(b []byte, statusCode int) (interface{}, error) {
		if statusCode == http.StatusConflict {
			return nil, errors.Wrapf(ConflictError, "create ObservabilityTracings %s", args_1.Name())
		}
		if statusCode < 300 && statusCode >= 200 {
			return nil, nil
		}
		return nil, errors.Errorf("call Post %s failed, return statuscode %d text %+v", url, statusCode, b)
	})
	return err
}
func (o *observabilityTracingsInterface) Delete(args_0 context.Context, args_1 string) error {
	url := fmt.Sprintf("http://"+o.client.server+apiURL+"/mesh/services/%s/"+"tracings", args_1)
	_, err := client.NewHTTPJSON().DeleteByContext(args_0, url, nil, nil).HandleResponse(func(b []byte, statusCode int) (interface{}, error) {
		if statusCode == http.StatusNotFound {
			return nil, errors.Wrapf(NotFoundError, "Delete ObservabilityTracings %s", args_1)
		}
		if statusCode < 300 && statusCode >= 200 {
			return nil, nil
		}
		return nil, errors.Errorf("call Delete %s failed, return statuscode %d text %+v", url, statusCode, b)
	})
	return err
}
func (o *observabilityTracingsInterface) List(args_0 context.Context) ([]*resource.ObservabilityTracings, error) {
	url := "http://" + o.client.server + apiURL + "/mesh/services"
	result, err := client.NewHTTPJSON().GetByContext(args_0, url, nil, nil).HandleResponse(func(b []byte, statusCode int) (interface{}, error) {
		if statusCode == http.StatusNotFound {
			return nil, errors.Wrapf(NotFoundError, "list service")
		}
		if statusCode >= 300 && statusCode < 200 {
			return nil, errors.Errorf("call GET %s failed, return statuscode %d text %+v", url, statusCode, b)
		}
		services := []v1alpha1.Service{}
		err := json.Unmarshal(b, &services)
		if err != nil {
			return nil, errors.Wrapf(err, "unmarshal data to v1alpha1.")
		}
	})
	if err != nil {
		return nil, err
	}
	return result.([]*resource.ObservabilityTracings), nil
}
