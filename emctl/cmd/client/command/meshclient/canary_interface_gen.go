// Code generated by github.com/megaease/easemeshctl/cmd/generator, DO NOT EDIT.
package meshclient

import (
	"context"
	"encoding/json"
	"fmt"
	resource "github.com/megaease/cmd/client/resource"
	v1alpha1 "github.com/megaease/easemesh-api/v1alpha1"
	client "github.com/megaease/easemeshctl/cmd/common/client"
	errors "github.com/pkg/errors"
	http "http"
)

type canaryGetter struct {
	client *meshClient
}
type canaryInterface struct {
	client *meshClient
}

func (c *canaryGetter) Canary() CanaryInterface {
	return &canaryInterface{client: c.client}
}
func (c *canaryInterface) Get(args_0 context.Context, args_1 string) error {
	url := fmt.Sprintf("http://"+c.client.server+apiURL+"/mesh/services/%s/"+"canary", args_1)
	r, err := client.NewHTTPJSON().GetByContext(args_0, url, nil, nil).HandleResponse(func(b []byte, statusCode int) (interface{}, error) {
		if statusCode == http.StatusNotFound {
			return nil, errors.Wrapf(NotFoundError, "unmarshal data to v1alpha1.canary")
		}
		if statusCode >= 300 {
			return nil, errors.Errorf("call %s failed, return status code %d text %+v", url, statusCode, b)
		}
		canary := &v1alpha1.Canary{}
		err := json.Unmarshal(b, canary)
		if err != nil {
			return nil, errors.Wrapf(err, "unmarshal data to v1alpha1.canary")
		}
		return resource.ToCanary(args_1, canary), nil
	})
	if err != nil {
		return nil, err
	}
	return r.(*resource.Canary), nil
}
